import { cleanupOutdatedCaches, precacheAndRoute } from "workbox-precaching";
import { NavigationRoute, Route, registerRoute } from "workbox-routing";
import { CacheFirst, NetworkFirst } from "workbox-strategies";
import { BackgroundSyncPlugin } from "workbox-background-sync";
import { CacheableResponsePlugin } from "workbox-cacheable-response";

// Declare self as the global scope for Service Worker
declare let self: ServiceWorkerGlobalScope;

// Clean up outdated caches to keep things up-to-date
cleanupOutdatedCaches();

// Precache files generated by VitePWA
precacheAndRoute(self.__WB_MANIFEST);

// Skip waiting immediately after installation
self.skipWaiting();

// Cache images with CacheFirst strategy (For both mobile and desktop)
const imageRoute = new Route(
  ({ request, sameOrigin }) => {
    return sameOrigin && request.destination === "image";
  },
  new CacheFirst({
    cacheName: "images",
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200], // Cache only successful responses
      }),
    ],
  })
);
registerRoute(imageRoute);

// Cache API calls with NetworkFirst strategy (For both mobile and desktop)
const fetchTasksRoute = new Route(
  ({ request }) => {
    return request.url === import.meta.env.VITE_API_BASE_URL + "/tasks";
  },
  new NetworkFirst({
    cacheName: "api/fetch-tasks",
    plugins: [
      new CacheableResponsePlugin({
        statuses: [200], // Cache only successful responses
      }),
    ],
  })
);
registerRoute(fetchTasksRoute);

// Cache navigations using NetworkFirst strategy (For both mobile and desktop)
const navigationRoute = new NavigationRoute(
  new NetworkFirst({
    cacheName: "navigation",
    networkTimeoutSeconds: 3, // Ensure a quick fallback if the network is slow
  })
);
registerRoute(navigationRoute);

// Background Sync (enabled for offline usage)
const bgSyncPlugin = new BackgroundSyncPlugin("backgroundSyncQueue", {
  maxRetentionTime: 24 * 60, // Retry failed requests within 1 day
});

// Example API route with background sync for failed requests
const fetchTasksWithBgSyncRoute = new Route(
  ({ request }) => {
    return request.url === import.meta.env.VITE_API_BASE_URL + "/tasks";
  },
  new NetworkFirst({
    cacheName: "api/fetch-tasks-bg-sync",
    plugins: [bgSyncPlugin],
  })
);
registerRoute(fetchTasksWithBgSyncRoute);

