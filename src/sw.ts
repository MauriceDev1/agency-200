import { cleanupOutdatedCaches, precacheAndRoute } from "workbox-precaching";
import { NavigationRoute, registerRoute } from "workbox-routing";
import { CacheFirst, NetworkFirst } from "workbox-strategies";
import { BackgroundSyncPlugin } from "workbox-background-sync";
import { CacheableResponsePlugin } from "workbox-cacheable-response";

// Declare self as the global scope for Service Worker
declare let self: ServiceWorkerGlobalScope;

// Clean up outdated caches to keep things up-to-date
cleanupOutdatedCaches();

// Precache files generated by VitePWA
precacheAndRoute(self.__WB_MANIFEST);

// Install and activate events for better control over cache versions
self.addEventListener("install", () => {
  self.skipWaiting(); // Activate SW immediately after installation
});

self.addEventListener("activate", async () => {
  const cacheKeys = await caches.keys();
  await Promise.all(
    cacheKeys
      .filter((key) => key !== "images" && key !== "navigation")
      .map((key) => caches.delete(key))
  );
});


// Cache images with CacheFirst strategy
registerRoute(
  ({ request }) => {
    return (
      request.destination === "image" &&
      new URL(request.url).origin === self.location.origin
    );
  },
  new CacheFirst({
    cacheName: "images",
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200], // Cache only successful responses
      }),
    ],
  })
);

// Cache API calls with NetworkFirst strategy
registerRoute(
  ({ url }) => url.pathname.startsWith("/tasks"),
  new NetworkFirst({
    cacheName: "api-fetch-tasks",
    plugins: [
      new CacheableResponsePlugin({
        statuses: [200], // Cache only successful responses
      }),
    ],
  })
);

// Cache navigations using NetworkFirst strategy
registerRoute(
  new NavigationRoute(
    new NetworkFirst({
      cacheName: "navigation",
      networkTimeoutSeconds: 3, // Ensure a quick fallback if the network is slow
    })
  )
);

// Background Sync for offline requests
const bgSyncPlugin = new BackgroundSyncPlugin("backgroundSyncQueue", {
  maxRetentionTime: 24 * 60, // Retry failed requests within 1 day
});

// Example route with background sync
registerRoute(
  ({ url }) => url.pathname.startsWith("/tasks"),
  new NetworkFirst({
    cacheName: "api-fetch-tasks-bg-sync",
    plugins: [bgSyncPlugin],
  })
);
